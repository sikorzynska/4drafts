@model PaginatedList<ThreadsBrowseModel>
@{
    var user = await this.userManager.GetUserAsync(User);
    var userId = user == null ? null : user.Id;
    var avatar = "";
}

<div class="row ml-1">
    <input class="d-none" id="genre-value" value="@Model.Genre" />
    <input class="d-none" id="sort-value" value="@Model.SortType" />
    <input class="d-none" id="own-value" value="@Model.Own" />
    <input class="d-none" id="liked-value" value="@Model.Liked" />
    <div class="form-group">
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">
                    <i class="fas fa-sort"></i>
                </div>
            </div>
            <select onchange="addFilterRoutes()" id="sort-select" class="selectpicker form-control" title="Sort">
                <option id="best" value="best" data-icon="fas fa-rocket">Best</option>
                <option id="new" value="new" data-icon="fas fa-clock">New</option>
                <option id="controversial" value="controversial" data-icon="fas fa-fire">Controversial</option>
            </select>
        </div>
    </div>
    <div class="form-group ml-1">
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">
                    <i class="fas fa-folder-open"></i>
                </div>
            </div>
            <select onchange="addFilterRoutes()" id="genre-select" class="selectpicker form-control" title="Genre">
                <option value="0" data-icon="fas fa-times">Default</option>
                @foreach (var genre in Model.Genres)
                {
                    <option id="@(genre.Id)genre" value="@genre.Id">@genre.Name</option>
                }


            </select>
        </div>
    </div>
    @{
        if (userId != null)
        {
            <div class="form-group ml-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            <i class="fas fa-user"></i>
                        </div>
                    </div>
                    <input class="opt-checkbox" id="mine-checkbox" type="checkbox" data-toggle="toggle" data-on="Mine" data-off="Mine">
                </div>
            </div>
            <div class="form-group ml-1">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            <i class="fas fa-heart"></i>
                        </div>
                    </div>
                    <input class="opt-checkbox" id="liked-checkbox" type="checkbox" data-toggle="toggle" data-on="Favourites" data-off="Favourites">
                </div>
            </div>
        }
    }
    <div class="form-group ml-1">
        <a id="filter" class="btn btn-primary form-control"><i class="fas fa-filter"></i> Filter</a>
    </div>
    <img src="~/images/pointthis.png" alt="point this" class="pointthis" id="pointthis" />
</div>
<div class="table-responsive">
    <table id="threadTable" class="table table-hover table-fixed">
        <thead class="bg-tablehead">
            <tr>
                <th class="text-truncate border w-16" scope="col">Genre</th>
                <th class="text-truncate border" scope="col">Title</th>
                <th class="text-truncate border w-15" scope="col">Posted</th>
                <th class="text-truncate text-center w-10 border" scope="col">Likes</th>
                <th class="text-truncate text-center w-10 border" scope="col">Replies</th>
                <th class="text-truncate border w-15" scope="col">Author</th>
            </tr>
        </thead>
        <tbody>
            @{
                if (Model.Any())
                {
                    foreach (var thread in Model)
                    {
                        avatar = String.IsNullOrWhiteSpace(thread.AuthorAvatarUrl) ? "https://image.flaticon.com/icons/png/512/64/64572.png" : thread.AuthorAvatarUrl;
                        if (userId == thread.AuthorId)
                        {
                            <tr class="table-light" id="@thread.Id">
                                <td class="border">
                                    @{
                                        for (int i = 0; i < thread.GenresSimplified.Count(); i++)
                                        {
                                            <span class="badge badge-info"><a class="btn-link" tabindex="0" data-container="body" data-toggle="popover" data-trigger="focus" data-placement="top" data-content="@thread.GenreDescriptions[i]">[@thread.GenresSimplified[i]]</a></span>
                                        }
                                    }
                                </td>
                                <th class="border"><a asp-controller="Threads" asp-action="Read" asp-route-t="@thread.Id" class="d-block text-truncate btn-link"><strong>@thread.Title</strong></a></th>
                                <td class="text-truncate border">@thread.CreatedOn</td>
                                <td class=" text-center border">@thread.Points</td>
                                <td class=" text-center border">@thread.CommentCount</td>
                                <td class="text-truncate border">
                                    <div class="d-inline media-img-30">
                                        <a onclick="popUp('/Users/Peek/','peek-profile', null, '@thread.AuthorName')" class="btn-link">
                                            <img class="rounded-circle border" src="@avatar" />
                                            @thread.AuthorName
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr class="table-secondary" id="@thread.Id">
                                <td class="border">
                                    @{
                                        for (int i = 0; i < thread.GenresSimplified.Count(); i++)
                                        {
                                            <span class="badge badge-info"><a class="btn-link" tabindex="0" data-container="body" data-toggle="popover" data-trigger="focus" data-placement="top" data-content="@thread.GenreDescriptions[i]">[@thread.GenresSimplified[i]]</a></span>
                                        }
                                    }
                                </td>
                                <th class="border"><a asp-controller="Threads" asp-action="Read" asp-route-t="@thread.Id" class="d-block text-truncate btn-link"><strong>@thread.Title</strong></a></th>
                                <td class="text-truncate border">@thread.CreatedOn</td>
                                <td class=" text-center border">@thread.Points</td>
                                <td class=" text-center border">@thread.CommentCount</td>
                                <td class="text-truncate border">
                                    <div class="d-inline media-img-30">
                                        <a class="btn-link" onclick="popUp('/Users/Peek/','peek-profile', null, '@thread.AuthorName')">
                                            <img class="rounded-circle border" src="@avatar" />
                                            @thread.AuthorName
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                }
            }
        </tbody>
    </table>
</div>

@{
    var prevDisabled = !Model.PreviousPage ? "disabled" : "";
    var nextDisabled = !Model.NextPage ? "disabled" : "";
}
<div class="container w-100">
    <div class="text-center">
        <a asp-controller="Threads" asp-action="Browse"
           asp-route-genre="@Model.Genre" asp-route-sort="@Model.SortType" 
           asp-route-own="@Model.Own" asp-route-liked="@Model.Liked" 
           asp-route-page="1"
           class="btn btn-secondary @prevDisabled">
            <i class="fas fa-angle-double-left"></i>
        </a>
        <a asp-controller="Threads" asp-action="Browse" 
           asp-route-genre="@Model.Genre" asp-route-sort="@Model.SortType" 
           asp-route-own="@Model.Own" asp-route-liked="@Model.Liked" 
           asp-route-page="@(Model.PageIndex - 1)"
           class="btn btn-secondary @prevDisabled">
            <i class="fas fa-angle-left"></i>
        </a>

        @{
            for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.PageIndex)
                {
                    <a class="btn btn-secondary disabled">@i</a>
                }
                else
                {
                    <a asp-controller="Threads" asp-action="Browse" 
                       asp-route-genre="@Model.Genre" asp-route-sort="@Model.SortType" 
                       asp-route-own="@Model.Own" asp-route-liked="@Model.Liked" 
                       asp-route-page="@i" class="btn btn-secondary">
                        @i
                    </a>
                }
            }
        }
        <a asp-controller="Threads" asp-action="Browse" 
           asp-route-genre="@Model.Genre" asp-route-sort="@Model.SortType" 
           asp-route-own="@Model.Own" asp-route-liked="@Model.Liked" 
           asp-route-page="@(Model.PageIndex + 1)"
           class="btn btn-secondary @nextDisabled">
            <i class="fas fa-angle-right"></i>
        </a>
        <a asp-controller="Threads" asp-action="Browse" 
           asp-route-genre="@Model.Genre" asp-route-sort="@Model.SortType"
           asp-route-own="@Model.Own" asp-route-liked="@Model.Liked" 
           asp-route-page="@Model.TotalPages"
           class="btn btn-secondary @nextDisabled">
            <i class="fas fa-angle-double-right"></i>
        </a>
    </div>
</div>
